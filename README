Реализован следующий функционал:
1) автоматическое приведение элементов BUTTON, INPUT[TYPE=BUTTON], INPUT[TYPE=SUBMIT] и элементов класса .BUTTON к виду UI-кнопок
2) автоматическое приведение группы чекбоксов или радиокнопок, окруженных DIV  с соотвественно классом .CHECKBOX или .RADIO к виду buttonset
3) и 4) реализован функционал модальных окошек как в Joomla по умолчанию на mootools: ссылка с классом .MODAL автоматически откроется в UI-модальном окне. Доля передачи пользовательского заголовка и пользовательских размеров модального окна нужно в атрибуте data-xjs передать JSON-объект вида {"title": "Мое окно", "width": 600, "height": 400}
5) реализован автоматический механизм тултипов. Чтобы у объекта при наведении повился тултип, достаточно добавить тегу атрибут data-title с текстом для тултипа.
6) все тестовые поля (INPUT[TYPE=TEXT], INPUT[TYPE=PASSWORD], TEXTAREA) автоматически приобретают панель управления и уведомлений. По умолчанию это выражается в виде иконки "Очистить", при клике на которую текстовое поле очищается
7) чтобы сделать поле обязательным к заполнению и повестить на него валидатор, контроллирующий заполнение, достаточно к элементу формы добавить класс .REQUIRED. У элемента появится справа звездочка с тултипом "Обязательное поле" и в случае попытки отправить форму без данного поля будет выскакивать модальное окно, напоминающее, что не все поля еще заполнены. Данный механизм работает в контексте тега FORM и/или AJAX-submit
8) чтобы сделать текстовое поле автозаполняемым, достаточно добавить в тег класс .AUTOCOMPLETE, а в атрибуте data-xjs передать объект JSON  с параметром handler (имя обработчика данного поля). Поля автозаполнения можно определить по наличию иконки карандаша в контрольной панели элемента
9) реализован механизм AJAX-submit, для этого элементу достаточно добавить класс .SUBMIT и передать в атрибуте data-xjs JSON-объект с параметрами handler и wrapper (область захвата сабмита - любой парный тег, по умолчанию BODY. После сабмита обработчик ожидает получить HTML-код, который и будет размещен в зоне захвата). Независимо от того, размещен ли сабмит в контексте тега FORM или нет, механизм отработает корректно, при этом все INPUT-поля в зоне захвата будут сериалозованы и отправлены хендлеру методом POST. Данный механизм можно использовать не только для сабмитинга форм, но и для ajax-based замещения контента
10) механизм автосохранения позволяет осуществлять автоматические удаленные сохранение или валидацию поля по мере ввода в него информации. Чтобы поле сделать автосохраняемым, необходимо в тег добавить класс .AUTOSAVE и в атрибуте data-xjs передать JSON-объект с параметром handler (обработчик поля), после изменения значения элемента (событие CHANGE) данному обработчику будут переданы параметры NAME и VALUE элемента, а также параметр CHECKED='checked|undefined', если поле автосохранения - чекбокс. От хендлера ожидается ответ в виде JSON-объекта со значением {result: 1} - успех или {result: 0} - неудача.